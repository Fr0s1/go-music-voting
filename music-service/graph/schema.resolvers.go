package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"music-service/graph/model"
	"music-service/pkg/albums"
	"music-service/pkg/auth"
	"strconv"

	logging "music-service/pkg/logging"
)

// UploadAlbum is the resolver for the uploadAlbum field.
func (r *mutationResolver) UploadAlbum(ctx context.Context, input model.NewAlbum) (*model.Album, error) {
	user := auth.ForContext(ctx)

	logging.Log.WithFields(logging.StandardFields).Info("User: ", user)

	user_json, _ := json.Marshal(user)

	logging.Log.WithFields(logging.StandardFields).Info("User info: ", string(user_json))

	logging.Log.WithFields(logging.StandardFields).Info("Reach UploadAlbum function")

	if user == nil {
		return &model.Album{}, fmt.Errorf("access denied")
	}

	var album albums.Album

	album.Name = input.Name
	album.Artist = input.Artist
	album.Genre = input.Genre
	album.Year = input.Year

	album.Uploader = user

	logging.Log.WithFields(logging.StandardFields).Info("Reach insert statement: album ", album)

	albumId := album.Save()

	return &model.Album{ID: strconv.Itoa(int(albumId)), Name: album.Name, Artist: album.Artist, Genre: album.Genre, Year: album.Year, Uploader: &model.User{ID: user.Id, Username: user.Username}}, nil
}

// GetAlbum is the resolver for the getAlbum field.
func (r *queryResolver) GetAlbum(ctx context.Context, input model.AlbumSearch) ([]*model.Album, error) {
	album, err := albums.GetAlbum(input.Name, input.Artist)

	fmt.Println("Reach GetAlbum resolver")

	var albums []*model.Album

	if err != nil {
		log.Fatal(err)

		return albums, nil
	}

	if album.ID == "" {
		return albums, nil
	}

	graphql_album := &model.Album{ID: album.ID, Name: album.Name, Artist: album.Artist, Genre: album.Genre, Year: album.Year, Uploader: &model.User{ID: album.Uploader.Id, Username: album.Uploader.Username}}

	albums = append(albums, graphql_album)

	return albums, nil
}

// GetAllAlbums is the resolver for the getAllAlbums field.
func (r *queryResolver) GetAllAlbums(ctx context.Context) ([]*model.Album, error) {
	var resultAlbums []*model.Album

	albums := albums.GetAll()

	for _, album := range albums {
		uploader := &model.User{
			ID:       album.Uploader.Id,
			Username: album.Uploader.Username,
		}

		graphql_album := &model.Album{
			ID:       album.ID,
			Name:     album.Name,
			Year:     album.Year,
			Artist:   album.Artist,
			Genre:    album.Genre,
			Uploader: uploader,
		}

		resultAlbums = append(resultAlbums, graphql_album)
	}

	return resultAlbums, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
