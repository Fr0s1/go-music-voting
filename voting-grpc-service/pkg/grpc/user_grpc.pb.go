// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: user.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserCredentialsClient is the client API for UserCredentials service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCredentialsClient interface {
	GetUser(ctx context.Context, in *UserJWTToken, opts ...grpc.CallOption) (*User, error)
	GetUserDetails(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*User, error)
}

type userCredentialsClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCredentialsClient(cc grpc.ClientConnInterface) UserCredentialsClient {
	return &userCredentialsClient{cc}
}

func (c *userCredentialsClient) GetUser(ctx context.Context, in *UserJWTToken, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/grpc.UserCredentials/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCredentialsClient) GetUserDetails(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/grpc.UserCredentials/GetUserDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCredentialsServer is the server API for UserCredentials service.
// All implementations must embed UnimplementedUserCredentialsServer
// for forward compatibility
type UserCredentialsServer interface {
	GetUser(context.Context, *UserJWTToken) (*User, error)
	GetUserDetails(context.Context, *UserQuery) (*User, error)
	mustEmbedUnimplementedUserCredentialsServer()
}

// UnimplementedUserCredentialsServer must be embedded to have forward compatible implementations.
type UnimplementedUserCredentialsServer struct {
}

func (UnimplementedUserCredentialsServer) GetUser(context.Context, *UserJWTToken) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserCredentialsServer) GetUserDetails(context.Context, *UserQuery) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetails not implemented")
}
func (UnimplementedUserCredentialsServer) mustEmbedUnimplementedUserCredentialsServer() {}

// UnsafeUserCredentialsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCredentialsServer will
// result in compilation errors.
type UnsafeUserCredentialsServer interface {
	mustEmbedUnimplementedUserCredentialsServer()
}

func RegisterUserCredentialsServer(s grpc.ServiceRegistrar, srv UserCredentialsServer) {
	s.RegisterService(&UserCredentials_ServiceDesc, srv)
}

func _UserCredentials_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserJWTToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCredentialsServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserCredentials/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCredentialsServer).GetUser(ctx, req.(*UserJWTToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCredentials_GetUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCredentialsServer).GetUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.UserCredentials/GetUserDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCredentialsServer).GetUserDetails(ctx, req.(*UserQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCredentials_ServiceDesc is the grpc.ServiceDesc for UserCredentials service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCredentials_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.UserCredentials",
	HandlerType: (*UserCredentialsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserCredentials_GetUser_Handler,
		},
		{
			MethodName: "GetUserDetails",
			Handler:    _UserCredentials_GetUserDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
